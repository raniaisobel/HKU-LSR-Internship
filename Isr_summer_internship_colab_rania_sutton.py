# -*- coding: utf-8 -*-
"""LSR Summer Internship Colab - Rania Sutton

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EAjR8UmC6FB2RRildiS38gbO8PQtzR53
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize
from scipy.fft import fft, fftfreq
import matplotlib.patches as mpatches
from astropy.io import fits
import astropy.units as u
from astropy.coordinates import SkyCoord
import io

# Random Array vs sum of Arrays ----------------------------------------------------------------------------------------------------------------------

#numbers = np.random.randint(1,10,size=1000)
n1 = np.random.uniform(1.0,10.0,size=1000) #inclusive of 1.0
#print(n1)

s1 = np.random.uniform(-1.5,1.5,size=1000)
#print(s1)

#y_values = n1+s1
#plt.scatter(n1, y_values, label = 'plot of n1 vs n1+s1',alpha=0.5)
#plt.xlabel('n1')
#plt.ylabel('n1+s1')
#plt.grid()
#plt.legend()
#plt.show()

# Task Three
y_values = 2.7 + 3.2*(n1+s1)
def linear_fit(x,m,b):
  return m*x + b

params,covariance = optimize.curve_fit(linear_fit,n1,y_values)
m,b=params
m_error,b_error = np.sqrt(np.diag(covariance))

res = y_values - linear_fit(n1,m,b)
chi_sq = np.sum((res**2)/y_values) #y_values = uncertainties
nu = len(y_values) - 2
reduced_chi_sq = chi_sq/nu

#display of original
plt.scatter(n1,y_values)
plt.plot(n1,linear_fit(n1,m,b), label='Scatter w/ Scipy fitted line',color='red')
plt.xlabel('n1')
plt.ylabel('y_values')
plt.legend()
plt.grid()
print(f"Slope (m): {m:.3f} ± {m_error:.3f}, Intercept (b): {b:.3f} ± {b_error:.3f}")
print(f"Reduced chi-squared/Goodness of fit: {reduced_chi_sq:.3f} ")
plt.show()

# Trigonometric Functions ---------------------------------------------------------------------------------------------------------------------------

#new figure
x = np.linspace(-4*np.pi,4*np.pi,400)
plt.figure(figsize=(10,10))

#pi ticks
ticks = [-4*np.pi, -3*np.pi, -2*np.pi, -1*np.pi, 0, 1*np.pi, 2*np.pi, 3*np.pi, 4*np.pi]
labels = [r'$-4\pi$',r'$-3\pi$',r'$-2\pi$',r'$-1\pi$',r'$0$',r'$1\pi$',r'$2\pi$',r'$3\pi$',r'$4\pi$',] #using laTex formatting

#sin(x)
plt.subplot(2,2,1)
plt.plot(x,np.sin(x),label='sin(x)')
plt.title('Sine Func.')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.grid()
plt.legend()
plt.xticks(ticks,labels)

#cos(x)
plt.subplot(2,2,2)
plt.plot(x,np.cos(x),label='cos(x)')
plt.title('Cosine Func.')
plt.xlabel('x')
plt.ylabel('cos(x)')
plt.grid()
plt.legend()
plt.xticks(ticks,labels)

#tan(x)
plt.subplot(2,2,3)
plt.plot(x,np.tan(x),label='tan(x)')
plt.title('Tangent Func.')
plt.xlabel('x')
plt.ylabel('tan(x)')
plt.grid()
plt.legend()
plt.xticks(ticks,labels)

#sin(x)/x
plt.subplot(2,2,4)
plt.plot(x,np.sin(x)/x,label='sin(x)/x')
plt.title('Sine Over x Func.')
plt.xlabel('x')
plt.ylabel('sin(x)/x')
plt.grid()
plt.legend()
plt.xticks(ticks,labels)

plt.show()

# Signals and Fourier Transforms ------------------------------------------------------------------------------------------------------------------
a = 2
s = 1000
d = 2
t = np.linspace(0, d,s,endpoint=False)
f = 3
ss = s/d
freq = fftfreq(s,d/s)[:s//2]

x1 = a * np.sin(2*np.pi*f*t + 0.15*np.pi)
ft1 = fft(x1)

n1 = np.random.uniform(-0.5,0.5,size=s)
x2 = x1 + n1
ft2 = fft(x2)

x3 = x2 + 0.99 * np.sin(2*np.pi*8*t + 0.35*np.pi)
ft3 = fft(x3)

x4 = x2 + 0.6*t**(0.5)
ft4 = fft(x4)

plt.figure(figsize=(10, 12))

#row 1
plt.subplot(4,2,1)
plt.plot(t, x1)
plt.title('Pure Sine Signal')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.grid()

plt.subplot(4,2,2)
plt.plot(freq, np.abs(ft1[0:s//2]))
plt.loglog()
plt.title('Fourier Transform (Log scale)')
plt.xlabel('Frequency')
plt.ylabel('Magnitude')
plt.grid()

#row 2
plt.subplot(4,2,3)
plt.plot(t, x2, color='red')
plt.title('Sine Signal with Random Noise')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.grid()

plt.subplot(4,2,4)
plt.plot(freq, np.abs(ft2[0:s//2]),color='red')
plt.loglog()
plt.title('Fourier Transform (Log scale)')
plt.xlabel('Frequency')
plt.ylabel('Magnitude')
plt.grid()

#row 3

plt.subplot(4,2,5)
plt.plot(t, x3, color='green')
plt.title('Sum of Two Sine Signals')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.grid()

plt.subplot(4,2,6)
plt.plot(freq, np.abs(ft3[0:s//2]), color='green')
plt.loglog()
plt.title('Fourier Transform (Log scale)')
plt.xlabel('Frequency')
plt.ylabel('Magnitude')
plt.grid()

#row 4
plt.subplot(4,2,7)
plt.plot(t, x4, color='purple')
plt.title('Sine Signal and a Function of Time')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.grid()

plt.subplot(4,2,8)
plt.plot(freq, np.abs(ft4[0:s//2]), color='purple')
plt.loglog()
plt.title('Fourier Transform (Log scale)')
plt.xlabel('Frequency')
plt.ylabel('Magnitude')
plt.grid()

plt.tight_layout()
plt.show()

# Astronomical Coordinate Systems ---------------------------------------------------------------------------------------------------------------------

from astropy.coordinates import SkyCoord
from astropy.coordinates import Galactic
import astropy.units as u

gc1 = SkyCoord(l=359.944866*u.deg, b=-0.043915*u.deg, frame='galactic')
gc2 = gc1.transform_to('icrs')
print(f"Galactic Centre in J2000: ({gc2.ra.deg}º,{gc2.dec.deg}º)\n")

c1 = SkyCoord(l=184.554646*u.deg, b= -5.783342*u.deg, frame='galactic')
c2 = c1.transform_to('icrs')
print(f"Crab in J2000: ({c2.ra.deg}º,{c2.dec.deg}º)\n")

m31= SkyCoord(l=121.174319*u.deg, b=-21.573310*u.deg, frame='galactic')
m32= m31.transform_to('icrs')
print(f"M31 in J2000: ({m32.ra.deg}º,{m32.dec.deg}º)\n")

m81= SkyCoord(l=283.7777365*u.deg, b=74.49115*u.deg, frame='galactic')
m82= m81.transform_to('icrs')
print(f"M87 in J2000: ({m82.ra.deg}º,{m82.dec.deg}º)\n")

t1= SkyCoord(l=170.644069*u.deg, b=83.361126*u.deg, frame='galactic')
t2= t1.transform_to('icrs')
print(f"TON-618 in J2000: ({t2.ra.deg}º,{t2.dec.deg}º)\n")

i1= SkyCoord(l=349.524794*u.deg, b=2.212662*u.deg, frame='galactic')
i2= i1.transform_to('icrs')
print(f"IGR J17091 -3624 in J2000: ({i2.ra.deg}º,{i2.dec.deg}º)\n")

s1= SkyCoord(l=359.944227*u.deg, b=-0.046157*u.deg, frame='galactic')
s2= s1.transform_to('icrs')
print(f"Sgr A* in J2000: ({s2.ra.deg}º,{s2.dec.deg}º)\n")

ss1= SkyCoord(l=11.315843*u.deg, b=-8.532834*u.deg, frame='galactic')
ss2= ss1.transform_to('icrs')
print(f"The Sun in J2000: ({ss2.ra.deg}º,{ss2.dec.deg}º)\n")

p1= SkyCoord(l=123.280543*u.deg, b=26.461395*u.deg, frame='galactic')
p2= p1.transform_to('icrs')
print(f"Polaris in J2000: ({p2.ra.deg}º,{p2.dec.deg}º)\n")

d1= SkyCoord(l=84.284728*u.deg, b=1.997547*u.deg, frame='galactic')
d2= d1.transform_to('icrs')
print(f"Deneb in J2000: ({d2.ra.deg}º,{d2.dec.deg}º)\n")

b1= SkyCoord(l=199.787228*u.deg, b=-8.958606*u.deg, frame='galactic')
b2= b1.transform_to('icrs')
print(f"Betelgeuse in J2000: ({b2.ra.deg}º,{b2.dec.deg}º)\n")

a1= SkyCoord(l=227.230283*u.deg, b=-8.890284*u.deg, frame='galactic')
a2= a1.transform_to('icrs')
print(f"Sirius A in J2000: ({a2.ra.deg}º,{a2.dec.deg}º)\n")

al1= SkyCoord(l=180.971903*u.deg, b=-20.248300*u.deg, frame='galactic')
al2= al1.transform_to('icrs')
print(f"Aldebaran in J2000: ({al2.ra.deg}º,{al2.dec.deg}º)\n")

ps1= SkyCoord(l=184.557476*u.deg, b=-5.784342*u.deg, frame='galactic')
ps2= ps1.transform_to('icrs')
print(f"PSR B0531+21 in J2000: ({ps2.ra.deg}º,{ps2.dec.deg}º)\n")

g1= SkyCoord(l=45.365776*u.deg, b=-0.219096*u.deg, frame='galactic')
g2= g1.transform_to('icrs')
print(f"GRS 1915+105 in J2000: ({g2.ra.deg}º,{g2.dec.deg}º)\n")

c21= SkyCoord(l=22.468269*u.deg, b=80.988266*u.deg, frame='galactic')
c22= c21.transform_to('icrs')
print(f"3C287 in J2000: ({c22.ra.deg}º,{c22.dec.deg}º)\n")

pg1= SkyCoord(l=21.908915*u.deg, b=43.964163*u.deg, frame='galactic')
pg2= pg1.transform_to('icrs')
print(f"PG1553 in J2000: ({pg2.ra.deg}º,{pg2.dec.deg}º)\n")

sa1= SkyCoord(l=158.583260*u.deg, b=-42.964483*u.deg, frame='galactic')
sa2= sa1.transform_to('icrs')
print(f"Saturn in J2000: ({sa2.ra.deg}º,{sa2.dec.deg}º)\n")

j1= SkyCoord(l=141.072562*u.deg, b=-52.729991*u.deg, frame='galactic')
j2= j1.transform_to('icrs')
print(f"Jupiter in J2000: ({j2.ra.deg}º,{j2.dec.deg}º)\n")

m1= SkyCoord(l=359.527905*u.deg, b=60.463151*u.deg, frame='galactic')
m2= m1.transform_to('icrs')
print(f"The Moon in J2000: ({m2.ra.deg}º,{m2.dec.deg}º)\n")

# Astronomical Time Systems ---------------------------------------------------------------------------------------------------------------------------

from astropy.time import Time
times = [51544.00000000, 54989.13541667, 60871.57013889, 60900.75000000]
t = Time(times, format='mjd', scale='utc')
print(t.isot)

# plotting GALACTIC onto hammer projection (HASH database, true PNe)

import matplotlib.pyplot as plt
import astropy.units as u
from astropy.coordinates import SkyCoord
import numpy as np
import io


dtype = [('idPNMain', 'i4'),('PNG', 'U10'),('Name', 'U10'),('PNstat', 'U1'),('RAJ2000', 'U12'),('DECJ2000', 'U12'),('DRAJ2000', 'f8'),('DDECJ2000', 'f8'),('Glon', 'f8'),('Glat', 'f8'),('MajDiam', 'f8'),('mainClass', 'U1'),('subClass', 'U1')]
data1 = np.genfromtxt('all_true_galactic_PNe.csv', delimiter=',',dtype=dtype,names=True)

go1 = data1['Glon']
ga1 = data1['Glat']
glon1 = go1 * u.deg
glat1 = ga1 * u.deg

g_coords1 = SkyCoord(l=glon1,b=glat1, frame='galactic')
fig = plt.figure(figsize=(10,15))
a = fig.add_subplot(111,projection='hammer')
a.plot(g_coords1.l.wrap_at(180*u.deg).to(u.radian), g_coords1.b.to(u.radian),'o',markersize=3, alpha=0.7,color='#755794')
a.set_title("(HASH) All True Galactic PNEs on Hammer Projection",loc='right')
a.set_xlabel("Galactic Longitude")
a.set_ylabel("Galactic Latitude")
plt.show()

# plotting ALL (GALACTIC + NON-GALACTIC) onto hammer projection (HASH database, true PNe)
dtype = [('idPNMain', 'i4'),('PNG', 'U10'),('Name', 'U10'),('PNstat', 'U1'),('RAJ2000', 'U12'),('DECJ2000', 'U12'),('DRAJ2000', 'f8'),('DDECJ2000', 'f8'),('Glon', 'f8'),('Glat', 'f8'),('MajDiam', 'f8'),('mainClass', 'U1'),('subClass', 'U1')]
data2 = np.genfromtxt('all_true_all_PNe.csv', delimiter=',',dtype=dtype,names=True)

go1 = data1['Glon']
ga1 = data1['Glat']
glon1 = go1 * u.deg
glat1 = ga1 * u.deg

go2 = data2['Glon']
ga2 = data2['Glat']
glon2 = go2 * u.deg
glat2 = ga2 * u.deg

g_coords1 = SkyCoord(l=glon1,b=glat1, frame='galactic')

g_coords2 = SkyCoord(l=glon2,b=glat2, frame='galactic')

fig = plt.figure(figsize=(10,15))
a = fig.add_subplot(111,projection='hammer')
a.plot(g_coords2.l.wrap_at(180*u.deg).to(u.radian), g_coords2.b.to(u.radian),'o',markersize=3, alpha=0.7,color='#c4709c')
a.plot(g_coords1.l.wrap_at(180*u.deg).to(u.radian), g_coords1.b.to(u.radian),'o',markersize=3, alpha=0.7,color='#755794')

a.set_title("(HASH) All True Galactic PNEs on Hammer Projection",loc='right')
a.set_xlabel("Galactic Longitude")
a.set_ylabel("Galactic Latitude")
pink_patch = mpatches.Patch(color='#c4709c', label='Non-galactic true PNEs')
purple_patch = mpatches.Patch(color='#755794', label='Galactic true PNEs')
handles = [pink_patch,purple_patch]
plt.legend(handles=handles, loc='lower right')
plt.show()

hdul = fits.open('gll_psc_v35.fit')
data = hdul[1].data
#print(data)

o3 = [row[4] for row in data]
a3 = [row[5] for row in data]

go3 = [float(value) for value in o3]
ga3 = [float(value) for value in a3]

glon3 = go3 * u.deg
glat3 = ga3 * u.deg

g_coords3 = SkyCoord(l=glon3,b=glat3, frame='galactic')

fig = plt.figure(figsize=(10,15))
a = fig.add_subplot(111,projection='hammer')
a.plot(g_coords3.l.wrap_at(180*u.deg).to(u.radian), g_coords3.b.to(u.radian),'o',markersize=3, alpha=0.7,color='#b06868')

a.set_title("(Fermi) High Energy Gamma Ray Sources (50 MeV to 1 TeV)",loc='right',size='small')
a.set_xlabel("Galactic Longitude")
a.set_ylabel("Galactic Latitude")
plt.show()

hdul = fits.open('gll_psc_v35.fit')
data = hdul[1].data
#print(data)

o3 = [row[4] for row in data]
a3 = [row[5] for row in data]

go3 = [float(value) for value in o3]
ga3 = [float(value) for value in a3]

glon3 = go3 * u.deg
glat3 = ga3 * u.deg

g_coords3 = SkyCoord(l=glon3,b=glat3, frame='galactic')

fig = plt.figure(figsize=(10,15))
a = fig.add_subplot(111,projection='hammer')
a.plot(g_coords3.l.wrap_at(180*u.deg).to(u.radian), g_coords3.b.to(u.radian),'o',markersize=3, alpha=0.2,color='#b06868')
a.plot(g_coords2.l.wrap_at(180*u.deg).to(u.radian), g_coords2.b.to(u.radian),'o',markersize=3, alpha=0.4,color='#c4709c')
a.plot(g_coords1.l.wrap_at(180*u.deg).to(u.radian), g_coords1.b.to(u.radian),'o',markersize=3, alpha=0.4,color='#755794')

a.set_title("Fermi Sources vs HASH PNes",loc='right',size='small')
a.set_xlabel("Galactic Longitude")
a.set_ylabel("Galactic Latitude")
pink_patch = mpatches.Patch(color='#c4709c', label='Non-galactic true PNEs')
purple_patch = mpatches.Patch(color='#755794', label='Galactic true PNEs')
red_patch = mpatches.Patch(color='#b06868', label='Fermi High Energy GR Sources')
handles = [pink_patch,purple_patch, red_patch]
plt.legend(handles=handles, loc='lower right')
plt.show()

distances = np.zeros((len(g_coords2), len(g_coords3)))
distances = g_coords2[:, None].separation(g_coords3[None, :]).deg
print(distances)

distances.shape

min_distances = {}

for col_index in range(distances.shape[1]):
    column = distances[:, col_index]
    min_row_index = np.argmin(column)
    min_distance = column[min_row_index]
    nearest_coord = g_coords2[min_row_index]
    min_distances[col_index] = (nearest_coord, min_distance)

for col_index, (coord, dist) in min_distances.items():
    print(f"PNe Coordinate: ({coord.l.value}º,{coord.b.value}º), Minimum Distance: {dist}º")

"""
for column in distances.T:
  min = column.min()
  list.append(min)
list = [float(value) for value in list]
print(list)
print(np.min(list))
"""

len(min_distances)

# chandra dataset - (x-ray)

dtypee = [('blank', 'f8'),('name', 'U20'), ('ra', 'U15'), ('dec', 'U15'), ('lii', 'f8'), ('bii', 'f8'), ('error_ellipse_r0', 'f8'), ('error_ellipse_r1', 'f8'), ('error_ellipse_angle', 'f8')]
data4 = np.genfromtxt('chandra.txt', delimiter='|', skip_header=3, dtype=dtypee, invalid_raise=False)
go4 = data4['lii']
ga4 = data4['bii']
glon4 = go4 * u.deg
glat4 = ga4 * u.deg

g_coords4 = SkyCoord(l=glon4,b=glat4, frame='galactic')

fig = plt.figure(figsize=(10,15))
a = fig.add_subplot(111,projection='hammer')
a.plot(g_coords4.l.wrap_at(180*u.deg).to(u.radian), g_coords4.b.to(u.radian),'o',markersize=3, alpha=0.7,color='#88a2d1')
a.set_title("Chandra X-Ray Signals",loc='right')
a.set_xlabel("Galactic Longitude")
a.set_ylabel("Galactic Latitude")
plt.show()

print(len(g_coords2)) # - 3345
print(len(g_coords4)) # = 407806
# so its (would be) a matrix of 3345 x 407,806, which is why its crashing - chandra is too crowded

dc = np.zeros((len(g_coords2), len(g_coords4)))
dc = g_coords2[:, None].separation(g_coords4[None, :]).deg
print(dc)

#crashes

# swift dataset - (ultraviolet and optical)

dtypeee = [('blank', 'f8'),('source_number', 'i8'), ('name', 'U25'), ('ra', 'U15'), ('dec', 'U15'), ('lii', 'f8'), ('bii', 'f8'), ('error_radius', 'f8'), ('count_rate_fb', 'f8'), ('count_rate_fb_pos_err', 'f8'), ('count_rate_fb_neg_err', 'f8'), ('pow_flux_a', 'f8'), ('pow_flux_a_pos_err', 'f8'), ('pow_flux_a_neg_err', 'f8'), ('apec_flux_a', 'f8'), ('apec_flux_a_pos_err', 'f8'), ('apec_flux_a_neg_err', 'f8')]
data5 = np.genfromtxt('swift.txt', delimiter='|', skip_header=3, dtype=dtypeee, invalid_raise=False)

go5 = data5['lii']
ga5 = data5['bii']

glon5 = go5 * u.deg
glat5 = ga5 * u.deg

g_coords5 = SkyCoord(l=glon5,b=glat5, frame='galactic')

fig = plt.figure(figsize=(10,15))
a = fig.add_subplot(111,projection='hammer')
a.plot(g_coords5.l.wrap_at(180*u.deg).to(u.radian), g_coords5.b.to(u.radian),'o',markersize=3, alpha=0.7,color='#8dc2db')
a.set_title("Swift UV & Optical Signals",loc='right')
a.set_xlabel("Galactic Longitude")
a.set_ylabel("Galactic Latitude")
plt.show()

print(len(g_coords2)) # - 3345
print(len(g_coords5)) # = 206,335
# so its (would be) a matrix of 3345 x 206,335

ds = np.zeros((len(g_coords2), len(g_coords5)))
ds = g_coords2[:, None].separation(g_coords5[None, :]).deg
print(ds)

#both crashed